import {
  Connection,
  Keypair,
  PublicKey,
  SystemProgram,
  Transaction,
  clusterApiUrl,
  sendAndConfirmTransaction,
} from '@solana/web3.js'
import bs58 from 'bs58'
import fs from 'node:fs'
import path from 'node:path'
import process from 'node:process'

// ‰ΩøÁî® npx index.ts <ÂΩíÈõÜÂú∞ÂùÄ> <Êñá‰ª∂Ë∑ØÂæÑ> ËøêË°å

// ‰ªéÂëΩ‰ª§Ë°åÂèÇÊï∞‰∏≠Ëé∑ÂèñÊé•Êî∂ËÄÖÁöÑÂÖ¨Èí•ÂíåÊñá‰ª∂Ë∑ØÂæÑ
const suppliedToPubkey = process.argv[2] || null
const directoryPath = process.argv[3] || process.cwd() // Â¶ÇÊûúÊ≤°ÊúâÊèê‰æõÊñá‰ª∂Ë∑ØÂæÑÔºåÂàô‰ΩøÁî®ÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩï

// Â¶ÇÊûúÊ≤°ÊúâÊèê‰æõÊé•Êî∂ËÄÖÂÖ¨Èí•ÊàñÊñá‰ª∂Ë∑ØÂæÑÔºåÂàôÊèêÁ§∫Áî®Êà∑ËæìÂÖ•Âπ∂ÈÄÄÂá∫Á®ãÂ∫è
if (!suppliedToPubkey) {
  console.log('Â°´ÂÜôÂΩíÈõÜÂú∞ÂùÄ')
  process.exit(1)
}

// Â∞ÜÊèê‰æõÁöÑÊé•Êî∂ËÄÖÂÖ¨Èí•Â≠óÁ¨¶‰∏≤ËΩ¨Êç¢‰∏∫ PublicKey ÂØπË±°
const toPubkey = new PublicKey(suppliedToPubkey)

// ÂàõÂª∫Âà∞ Solana devnet ÁöÑËøûÊé•
const connection = new Connection(clusterApiUrl('mainnet-beta'), 'confirmed')

// Á°ÆËÆ§Â∑≤Âä†ËΩΩÂèëÈÄÅËÄÖÂØÜÈí•ÂØπÔºåÊé•Êî∂ËÄÖÂÖ¨Èí•ÔºåÂπ∂‰∏îÂ∑≤ËøûÊé•Âà∞ Solana ÁΩëÁªú
console.log(
  `‚úÖ Loaded our own keypair, the destination public key, and connected to Solana`,
)

let keypairs: Keypair[] = []

const files = fs.readdirSync(directoryPath)

for (const file of files) {
  if (path.extname(file) === '.json') {
    const secretKey = JSON.parse(
      fs.readFileSync(path.join(directoryPath, file), 'utf-8'),
    )
    const decodedSecretKey = Array.isArray(secretKey)
      ? Uint8Array.from(secretKey)
      : bs58.decode(secretKey)

    keypairs.push(Keypair.fromSecretKey(decodedSecretKey))
  }
}

// Á°ÆËÆ§Â∑≤Âä†ËΩΩÂØÜÈí•ÂØπÔºåÂπ∂‰∏îÂ∑≤ËøûÊé•Âà∞ Solana ÁΩëÁªú
console.log(`‚úÖ Loaded keypairs and connected to Solana`)

// Âæ™ÁéØÈÅçÂéÜÊØè‰∏™Âú∞ÂùÄÂπ∂ÂèëÈÄÅËΩ¨Ë¥¶
for (const keypair of keypairs) {
  try {
    const balance = await connection.getBalance(keypair.publicKey)
    const minimum = await connection.getMinimumBalanceForRentExemption(0)

    console.log(`Ë¥¶Êà∑ÊúÄÂ∞èÈúÄË¶ÅÁöÑÁßüÈáë‰∏∫Ôºö${minimum / 1000000000} Sol`)

    // ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑ‰∫§ÊòìÂØπË±°
    const transaction = new Transaction()

    // ÂÆö‰πâË¶ÅÂèëÈÄÅÁöÑ lamports Êï∞ÈáèÔºà1 SOL = 1,000,000,000 lamportsÔºâ
    const LAMPORTS_TO_SEND = balance - minimum - 5500 // ‰øùÁïô‰∏Ä‰∫õ‰ΩôÈ¢ù‰ª•ÊîØ‰ªòÊâãÁª≠Ë¥π

    console.log('from keypair:', keypair.publicKey.toBase58())
    console.log('toPubkey:', toPubkey.toBase58())

    // ÂàõÂª∫ËΩ¨Ë¥¶Êåá‰ª§
    const sendSolInstruction = SystemProgram.transfer({
      fromPubkey: keypair.publicKey,
      toPubkey,
      lamports: LAMPORTS_TO_SEND,
    })

    // Â∞ÜËΩ¨Ë¥¶Êåá‰ª§Ê∑ªÂä†Âà∞‰∫§Êòì‰∏≠
    transaction.add(sendSolInstruction)

    // ÂèëÈÄÅ‰∫§ÊòìÂπ∂Á≠âÂæÖÁ°ÆËÆ§
    const signature = await sendAndConfirmTransaction(connection, transaction, [
      keypair,
    ])

    // ÊâìÂç∞ËΩ¨Ë¥¶ÊàêÂäüÁöÑÊ∂àÊÅØÂíå‰∫§ÊòìÁ≠æÂêç
    console.log(
      `üí∏ Sent ${LAMPORTS_TO_SEND / 1000000000} sol from ${keypair.publicKey} to ${toPubkey}.`,
    )
    console.log(`Transaction signature: https://explorer.solana.com/tx/${signature}`)
    console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
  } catch (error) {
    console.error(
      `‚ö†Ô∏è Error processing keypair ${keypair.publicKey.toBase58()}:`,
      error,
    )
  }
}

// ÊâìÂç∞ÊúÄÁªà‰ΩôÈ¢ù
console.log(
  `Final balance: ${(await connection.getBalance(toPubkey)) / 1000000000} Sol`,
)
